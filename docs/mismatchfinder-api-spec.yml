openapi: '3.0.2'
info:
  title: Wikidata Mismatch Finder
  version: '1.0'
servers:
  - url: https://mismatch-finder.toolforge.org/api/v0
paths:
  /mismatches:
    get:
      tags: ['store']
      summary: Get mismatches by item ID
      parameters:
        - name: ids
          in: query
          schema:
            type: string
          required: true
          description: List of item IDs to get mismatches for
        - name: importDate
          in: query
          schema:
            type: string
            format: date-time
          required: false
          description: Date of the import to filter mismatches by
        - name: status
          in: query
          schema:
            type: string
            enum:
              - new
              - reviewed
              - ...
          required: false
          description: Status(es) to filter mismatches by
      responses:
        '200':
          description: A list of mismatches, potentially empty if none are found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfMismatches'
        '500':
          $ref: '#/components/responses/UnexpectedError'


  /imports:
    get:
      tags: ['store']
      summary: Get meta information on all mismatch imports.
      responses:
        '200':
          description: Meta information on mismatch imports
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfImportMeta'
        '500':
          $ref: '#/components/responses/UnexpectedError'

    post:
      tags: ['store']
      summary: Upload a mismatch file to import
      requestBody:
        description: CSV file upload
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                mismatchFile:
                  type: string
                  format: binary
                description:
                  type: string
                  maxLength: 350
                bestBefore:
                  type: string
                  format: date
              required: [ mismatchFile ]
      responses:
        '201':
          description: Upload successful, import resource created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportMeta'
        '400':
          $ref: '#/components/responses/ClientError'
        '422':
          $ref: '#/components/responses/ValidationErrors'

  /imports/{importId}:
    get:
      tags: ['store']
      summary: Get meta information on a single mismatch import.
      parameters:
        - in: path
          name: importId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Meta information on a mismatch import
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportMeta'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  responses:
    ClientError:
        description: Bad request
        content:
            application/json:
                schema:
                  type: object
                  properties:
                    message:
                     type: string
                  required: [ code, message ]

    NotFound:
        description: The specified resource was not found
        content:
            application/json:
                schema:
                  type: object
                  properties:
                    message:
                     type: string
                  required: [ message ]

    ValidationErrors:
      description: Invalid data in request body
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
                example:
                    attribute_name: [ "string" ]

    UnexpectedError:
        description: An unexpected error has occurred
        content:
            application/json:
                schema:
                  type: object
                  properties:
                    code:
                      type: string
                    message:
                     type: string
                  required: [ code, message ]

  schemas:
    User:
      properties:
        username:
          type: string
        mw_userid:
          type: string

    Mismatch:
      properties:
        statementGuid:
          type: string
        propertyId:
          type: string
        wikidataValue:
          type: string
        externalValue:
          type: string
        externalReference:
          type: string

    ListOfMismatches:
      properties:
        mismatches:
          type: array
          items:
            $ref: '#/components/schemas/Mismatch'

    ImportMeta:
      properties:
        description:
          type: string
          maxLength: 350
        status:
          type: string
          enum:
            - pending
            - failed
            - completed
        best_before:
          type: string
          format: date
        created:
          type: string
          format: date
        uploader:
          type: object
          $ref: '#/components/schemas/User'

    ListOfImportMeta:
      properties:
        imports:
          type: array
          items:
            $ref: '#/components/schemas/ImportMeta'
